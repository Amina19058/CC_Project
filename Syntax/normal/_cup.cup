// -*- Java -*- File generated by the BNF Converter (bnfc 2.9.4).

// Parser definition for use with Java Cup
package Syntax.normal;

action code {:
public java_cup.runtime.ComplexSymbolFactory.Location getLeftLocation(
    java_cup.runtime.ComplexSymbolFactory.Location ... locations) {
  for (java_cup.runtime.ComplexSymbolFactory.Location l : locations) {
    if (l != null) {
      return l;
    }
  }
  return null;
}
:}
parser code {:
  public Syntax.normal.Absyn.Program pProgram() throws Exception
  {
    java_cup.runtime.Symbol res = parse();
    return (Syntax.normal.Absyn.Program) res.value;
  }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
  report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
  throw new Exception("Unrecoverable Syntax Error");
}

:}

nonterminal Syntax.normal.Absyn.Program Program;
nonterminal Syntax.normal.Absyn.ListExpr ListExpr;
nonterminal Syntax.normal.Absyn.Expr Expr;
nonterminal Syntax.normal.Absyn.Type Type;

terminal _SYMB_0;    //   ;
terminal _SYMB_1;    //   (
terminal _SYMB_2;    //   )
terminal _SYMB_3;    //   {
terminal _SYMB_4;    //   }
terminal _SYMB_5;    //   0
terminal _SYMB_6;    //   ->
terminal _SYMB_7;    //   Bool
terminal _SYMB_8;    //   False
terminal _SYMB_9;    //   Int
terminal _SYMB_10;    //   True
terminal _SYMB_11;    //   else
terminal _SYMB_12;    //   fun
terminal _SYMB_13;    //   if
terminal _SYMB_14;    //   iszero
terminal _SYMB_15;    //   pred
terminal _SYMB_16;    //   return
terminal _SYMB_17;    //   succ
terminal _SYMB_18;    //   then





terminal String _IDENT_;



start with Program;


Program ::= ListExpr:p_1  {: RESULT = new Syntax.normal.Absyn.ProgramExprs(p_1); :}
;
ListExpr ::=  /* empty */  {: RESULT = new Syntax.normal.Absyn.ListExpr(); :}
  | Expr:p_1  {: RESULT = new Syntax.normal.Absyn.ListExpr(); RESULT.addLast(p_1); :}
  | Expr:p_1 _SYMB_0:p_2 ListExpr:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;
Expr ::= _SYMB_13:p_1 Expr:p_2 _SYMB_18:p_3 Expr:p_4 _SYMB_11:p_5 Expr:p_6  {: RESULT = new Syntax.normal.Absyn.If(p_2,p_4,p_6); :}
  | _SYMB_12:p_1 Type:p_2 _IDENT_:p_3 _SYMB_1:p_4 Type:p_5 _IDENT_:p_6 _SYMB_2:p_7 _SYMB_3:p_8 _SYMB_16:p_9 Expr:p_10 _SYMB_4:p_11  {: RESULT = new Syntax.normal.Absyn.Abstraction(p_2,p_3,p_5,p_6,p_10); :}
  | Expr:p_1 Expr:p_2  {: RESULT = new Syntax.normal.Absyn.Application(p_1,p_2); :}
  | _SYMB_17:p_1 Expr:p_2  {: RESULT = new Syntax.normal.Absyn.Succ(p_2); :}
  | _SYMB_15:p_1 Expr:p_2  {: RESULT = new Syntax.normal.Absyn.Pred(p_2); :}
  | _SYMB_14:p_1 Expr:p_2  {: RESULT = new Syntax.normal.Absyn.IsZero(p_2); :}
  | _SYMB_10:p_1  {: RESULT = new Syntax.normal.Absyn.ConstTrue(); :}
  | _SYMB_8:p_1  {: RESULT = new Syntax.normal.Absyn.ConstFalse(); :}
  | _SYMB_5:p_1  {: RESULT = new Syntax.normal.Absyn.ConstZero(); :}
  | _IDENT_:p_1  {: RESULT = new Syntax.normal.Absyn.Var(p_1); :}
  | _SYMB_1:p_1 Expr:p_2 _SYMB_2:p_3  {: RESULT = p_2; :}
;
Type ::= _SYMB_7:p_1  {: RESULT = new Syntax.normal.Absyn.BoolType(); :}
  | _SYMB_9:p_1  {: RESULT = new Syntax.normal.Absyn.IntType(); :}
  | Type:p_1 _SYMB_6:p_2 Type:p_3  {: RESULT = new Syntax.normal.Absyn.FunType(p_1,p_3); :}
  | _SYMB_1:p_1 Type:p_2 _SYMB_2:p_3  {: RESULT = p_2; :}
;

